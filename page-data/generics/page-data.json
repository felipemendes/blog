{"componentChunkName":"component---src-templates-blog-post-js","path":"/generics/","result":{"data":{"site":{"siteMetadata":{"title":"Felipe Mendes"}},"markdownRemark":{"id":"2c586d79-a539-5541-b858-a32d9c984651","excerpt":"Nesta postagem abordo o que são códigos genéricos e qual a utilidade na rotina de um desenvolvedor Swift. O que são códigos genéricos? A melhor definição de…","html":"<p>Nesta postagem abordo o que são códigos genéricos e qual a utilidade na rotina de um desenvolvedor Swift.</p>\n<h2>O que são códigos genéricos?</h2>\n<p>A melhor definição de genéricos (ou <code class=\"language-text\">generics</code>) é a que encontramos no nosso dicionário: <strong>Que abarca muitas coisas gerais (ao mesmo tempo)</strong>. Em programação, o conceito não é diferente. <code class=\"language-text\">Generic</code> é utilizado para escrever funções e tipos flexíveis e reutilizáveis que pode funcionar com qualquer tipo, sujeito aos requisitos definidos.</p>\n<p>Essa abordagem permite escrever código onde os tipos são especificados posteriormente, quando são instanciados. O maior benefício é reduzir a duplicação e expressar sua intenção de maneira clara e abstrata.</p>\n<p>Deste modo, ao invés de criar uma função ou bloco de código que atenda cada tipo, como <code class=\"language-text\">String</code> ou <code class=\"language-text\">Int</code>, podemos especificar um tipo genérico que atenda qualquer situação. Assim deixamos a própria linguagem inferir o tipo com base no valor informado. O termo <code class=\"language-text\">Generic</code> também pode ser conhecido como tipo <code class=\"language-text\">placeholder</code>.</p>\n<h2>Criando código genérico</h2>\n<p>Uma função genérica em Swift possui um tipo reservado (um <code class=\"language-text\">placeholder</code>) antes de seu nome e entre sinais menor e maior. Dessa forma: <code class=\"language-text\">&lt;Tipo&gt;</code>.</p>\n<p>Os parâmetros também devem receber o mesmo tipo reservado.</p>\n<p>Este tipo reservado, normalmente, é identificado pelas letras <code class=\"language-text\">T</code>, <code class=\"language-text\">U</code>, <code class=\"language-text\">V</code> e entre outras.</p>\n<h2>Entendendo com exemplos</h2>\n<p>Utilizando o exemplo clássico, vamos supor que precisamos trocar dois valores numéricos, entre <code class=\"language-text\">a</code> e <code class=\"language-text\">b</code>. Para reproduzir a criação dessa função, devemos receber dois parâmetros do tipo inteiro. Especificando o tipo <code class=\"language-text\">Int</code> teríamos algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">swapTwoInts</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">swapTwoInts</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// (2, 1)</span></code></pre></div>\n<p>Agora vamos supor que seja necessário trocar dois números de ponto flutuante (<code class=\"language-text\">Double</code>) ou mesmo textos (<code class=\"language-text\">String</code>). Nesta situação, precisaríamos escrever outra função para esta tarefa, pois a função acima aceita apenas a entrada de números inteiros.</p>\n<p>Convertendo a mesma função para o tipo genérico, teríamos o código abaixo com o mesmo comportamento:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> swapTwoValues<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">swapTwoValues</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token number\">10.5</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token number\">12.8</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">// (12.8, 10.5)</span>\n<span class=\"token function\">swapTwoValues</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// (\"World\", \"Hello\")</span></code></pre></div>\n<p>Assim é possível trocar qualquer tipo de valor, não será necessário escrever outras funções para cada situação.</p>\n<blockquote>\n<p>Vale lembrar que não é possível informar tipos diferentes nos parâmetros ao invocar a mesma função genérica.</p>\n</blockquote>\n<h2>Restringindo o tipo genérico</h2>\n<p>Códigos genéricos também são muito utilizados para restringir instâncias somente para tipos de possuem alguma conformidade, com <code class=\"language-text\">class</code> ou <code class=\"language-text\">protocol</code>, por exemplo.</p>\n<h3>Conformidade com classe</h3>\n<p>No código a seguir, <code class=\"language-text\">T</code> está em conformidade com o tipo <code class=\"language-text\">BankAccount</code>. Portanto, não é possível invocar a função <code class=\"language-text\">displayBankAccount()</code> com nenhum outro valor que não seja do tipo <code class=\"language-text\">BankAccount</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BankAccount</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> holder<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n  <span class=\"token keyword\">var</span> number<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>holder<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>holder <span class=\"token operator\">=</span> holder\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> number\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> displayBankAccount<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">:</span> <span class=\"token builtin\">BankAccount</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span> account<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>account<span class=\"token punctuation\">.</span>number<span class=\"token delimiter variable\">)</span></span> account belongs to <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>account<span class=\"token punctuation\">.</span>holder<span class=\"token delimiter variable\">)</span></span>\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> myBankAccount <span class=\"token operator\">=</span> <span class=\"token function\">BankAccount</span><span class=\"token punctuation\">(</span>holder<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Felipe\"</span><span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">:</span> <span class=\"token number\">12345678</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">displayBankAccount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> myBankAccount<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 12345678 account belongs to Felipe</span></code></pre></div>\n<p>Da mesma forma que aplicamos esse comportamento nos métodos, também é possível deixar o Swift inferir o tipo de uma <code class=\"language-text\">class</code> ou <code class=\"language-text\">struct</code> e suas propriedades.</p>\n<p>O código genérico permite ao Swift inferir o tipo ou ao desenvolvedor preestabelecer essa informação. A <code class=\"language-text\">struct</code> abaixo pode ser instanciada de duas maneiras:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">GenericStruct</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> property<span class=\"token punctuation\">:</span> T<span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> explictStruct <span class=\"token operator\">=</span> <span class=\"token builtin\">GenericStruct</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Bool</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">// T is Bool</span>\n<span class=\"token keyword\">let</span> implicitStruct <span class=\"token operator\">=</span> <span class=\"token function\">GenericStruct</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// T is Int</span></code></pre></div>\n<h3>Conformidade com protocolo</h3>\n<p>No exemplo abaixo estamos restringindo a função <code class=\"language-text\">compareValues()</code> somente para os tipos que conformam com o protocolo <a href=\"https://developer.apple.com/documentation/swift/equatable\">Equatable</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> compareValues<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Equatable</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>between a<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">,</span> and b<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> a <span class=\"token operator\">==</span> b <span class=\"token operator\">?</span> <span class=\"token string\">\"equal\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"not equal\"</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"They are <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>result<span class=\"token delimiter variable\">)</span></span>\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">compareValues</span><span class=\"token punctuation\">(</span>between<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> and<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">// They are not equal</span>\n<span class=\"token function\">compareValues</span><span class=\"token punctuation\">(</span>between<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hi\"</span><span class=\"token punctuation\">,</span> and<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hi\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// They are equal</span></code></pre></div>","frontmatter":{"title":"Programação genérica","date":"October 29, 2020","description":""}},"previous":{"fields":{"slug":"/variacoes-do-nslayoutxaxisanchor/"},"frontmatter":{"title":"Variações do NSLayoutXAxisAnchor"}},"next":null},"pageContext":{"id":"2c586d79-a539-5541-b858-a32d9c984651","previousPostId":"9cbfdb80-cba5-554b-9b34-6bfe3f7156cb","nextPostId":null}},"staticQueryHashes":["1344965497","2841359383"]}