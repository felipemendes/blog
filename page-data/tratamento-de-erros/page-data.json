{"componentChunkName":"component---src-templates-blog-post-js","path":"/tratamento-de-erros/","result":{"data":{"site":{"siteMetadata":{"title":"Felipe Mendes"}},"markdownRemark":{"id":"a15a6b82-e1dd-593a-b03d-32207f2f5e87","excerpt":"É notório que tratamento de erros é uma etapa muito importante no desenvolvimento de software. Um bom tratamento possibilita um retorno relativamente mais…","html":"<p>É notório que tratamento de erros é uma etapa muito importante no desenvolvimento de software. Um bom tratamento possibilita um retorno relativamente mais amigável para o programador ou usuário. Dessa forma evitamos mensagens de erros padrões geradas pela própria linguagem de programação e exibimos uma informação mais fácil de ser compreendida.</p>\n<p>No entanto, muito se vê a utilização da estrutura de condição <em>IF</em> para tratamento de erros. O uso dessa condicional torna a manutenção do código muito difícil, pois as validações ficam aninhadas e aumentar a complexidade ciclomática. A melhor alternativa para melhorar a leitura e manutanção é manter as validações em pequenos blocos de código.</p>\n<p>A declaração <strong>TRY</strong> é uma ótima recomendação para manter o código mais compreensível.</p>\n<h2>Protocolo de erro do Swift</h2>\n<p>O protoco de erro é apenas um tipo para representar valores de erro que podem ser retornados por uma função ou como inicializador ao utilizar a declaração <strong>TRY</strong>. Em <em>Swift</em> é necessário criar um tipo de erro personalizado. Normalmente, um <code class=\"language-text\">Enum</code> é usado em conformidade com o protocolo de erro.</p>\n<p>Exemplo de <code class=\"language-text\">Enum</code> básico de erros:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token builtin\">FetchError</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> url\n    <span class=\"token keyword\">case</span> <span class=\"token function\">taskError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Error</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> noResponse\n    <span class=\"token keyword\">case</span> noData\n    <span class=\"token keyword\">case</span> <span class=\"token function\">responseStatusCode</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> invalidJson\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>throws e throw</h3>\n<p>Se uma função ou inicializador deve retornar um erro, o modificador <em>throws</em> precisa ser adicionado na sua assinatura, após os parâmetros e o tipo de retorno. Esse modificador é responsável por transmitir o erro da função até o local onde foi executado.</p>\n<p>Estrutura de assinatura de método com <em>throws</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">testData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span><span class=\"token builtin\">Return</span> <span class=\"token keyword\">Type</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora o <em>throw</em> é utilizado dentro da função e é responsável por retornar o tipo de error definido. Uma função com ambos ficaria dessa forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">testData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">&lt;</span>condition<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Code</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token builtin\">FetchError</span><span class=\"token punctuation\">.</span>noData\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>throw</em> também é útil dentro da declaração <em>Guard</em>. Desta forma se essa validação também retornar um erro podemos invocar um tipo definido no <code class=\"language-text\">Enum</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">guard</span> <span class=\"token operator\">&lt;</span>condition<span class=\"token operator\">></span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token builtin\">FetchError</span><span class=\"token punctuation\">.</span>noResponse <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>do-catch</h3>\n<p>Diferentemente de algumas linguagens, Swift utiliza a declaração <em>do-catch</em> ao invés de <em>try-catch</em>. Independentemente da forma que é escrito, toda função que utiliza o modificador <em>throws</em> deve ser executada dentro de um tratamento <em>TRY</em>, devido a possibilidade de retornar erros.</p>\n<p>Portanto, em Swift a execução deve ser feito da seguinte maneira:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token function\">testData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quando o bloco <em>catch</em> não possui nenhum padrão, <em>Swift</em> automaticamente entende que pode ser qualquer erro e cria uma constante local ocultando o valor de retorno com o erro. A melhor maneira neste caso é utilizar o <em>Enum</em> de erros aplicado na função e tratar cada tipo que foi criado. Com o <em>Enum</em> podemos criar um bloco <em>catch</em> para cada tipo.</p>\n<p>Ficaria desta forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token function\">testData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token builtin\">FetchError</span><span class=\"token punctuation\">.</span>url <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"URL can not be reached\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token builtin\">FetchError</span><span class=\"token punctuation\">.</span><span class=\"token function\">taskError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Task error when fetch data. Message: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token builtin\">FetchError</span><span class=\"token punctuation\">.</span>noResponse <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No response on fetch data\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token builtin\">FetchError</span><span class=\"token punctuation\">.</span>noData <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No data available\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token builtin\">FetchError</span><span class=\"token punctuation\">.</span><span class=\"token function\">responseStatusCode</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error on fetch data. Status code: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>code<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token builtin\">FetchError</span><span class=\"token punctuation\">.</span>invalidJson <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid JSON returned. Can not be processed\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>try, try? e try!</h3>\n<p><em>Swift</em> possui estas três variações do <em>TRY</em>:</p>\n<ul>\n<li><em>TRY</em>: maneira mais básica para lidar com funções que podem gerar erros.</li>\n<li><em>TRY?</em>: é utilizado para converter o retorno em um valor opcional. Dessa forma, se ocorrer um erro, a função retornará um valor nulo e o tratamento pode ser feito fora do bloco <em>do-catch</em>.</li>\n<li><em>TRY!</em>: é usado para afirmar que o erro não ocorrerá ao invocar a função. O sinal de <em>exclamação</em> também tira a obrigatóriedade de utilizar a declaração <em>do-catch</em>. Porém deve ser utilizado somente quando tiver certeza absoluta que a função não causará erros, caso contrário a aplicação irá travar. E este é um erro inadmissível durante o desenvolvimento.</li>\n</ul>","frontmatter":{"title":"Tratamento de erros","date":"29 junho, 2019","description":""}},"previous":{"fields":{"slug":"/frame-vs-bounds/"},"frontmatter":{"title":"Frame vs Bounds"}},"next":{"fields":{"slug":"/atalhos-terminal-e-git/"},"frontmatter":{"title":"Atalhos de Terminal e Git"}}},"pageContext":{"id":"a15a6b82-e1dd-593a-b03d-32207f2f5e87","previousPostId":"1ad0605f-9ba1-5a73-ae0f-f3235045a56d","nextPostId":"39f9f214-8f16-519b-8a66-a280d42da789"}},"staticQueryHashes":["1344965497","2841359383"]}